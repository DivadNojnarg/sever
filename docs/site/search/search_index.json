{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Good-looking problems: customise your Shiny disconnected screen and error messages. Star Sponsor Install Get it from Github with remotes or devtools : # install.packages(\"remotes\") remotes::install_github(\"JohnCoene/sever\") Usage Place use_sever() in your Shiny UI. Use sever() to customise the disconnected screen. Use cleave() to customise error messages. Example Place use_sever in your Shiny UI and use the sever function server-side, cancel the session from the terminal to see the customised screen. library(shiny) library(sever) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server) .bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 10px 7px 10px !important;line-height: 35px !important;height:51px !important;min-width:217px !important;text-decoration: none !important;display:inline-flex !important;color:#000000 !important;background-color:#FFFFFF !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 10px 7px 10px !important;font-size: 22px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#000000 !important;} Buy me a drink","title":"Home"},{"location":"#install","text":"Get it from Github with remotes or devtools : # install.packages(\"remotes\") remotes::install_github(\"JohnCoene/sever\")","title":"Install"},{"location":"#usage","text":"Place use_sever() in your Shiny UI. Use sever() to customise the disconnected screen. Use cleave() to customise error messages.","title":"Usage"},{"location":"#example","text":"Place use_sever in your Shiny UI and use the sever function server-side, cancel the session from the terminal to see the customised screen. library(shiny) library(sever) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server) .bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 10px 7px 10px !important;line-height: 35px !important;height:51px !important;min-width:217px !important;text-decoration: none !important;display:inline-flex !important;color:#000000 !important;background-color:#FFFFFF !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 10px 7px 10px !important;font-size: 22px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#000000 !important;} Buy me a drink","title":"Example"},{"location":"changelog/","text":"sever 0.0.2 Added cleave to customise error messages! Created website Ensure a single severed screen is present at any one time. Check if golem.app.prod option is set to keep functions from running if in dev mode to allow debugging, runs in prod. If not set runs functions as expected. Added bg_image argument to sever function. sever 0.0.1 sever_default A default sever screen. Simplified sever function: change three-dots to html argument which takes sever_default . sever 0.0.1.9000 Initial dev version.","title":"Changelog"},{"location":"changelog/#sever-002","text":"Added cleave to customise error messages! Created website Ensure a single severed screen is present at any one time. Check if golem.app.prod option is set to keep functions from running if in dev mode to allow debugging, runs in prod. If not set runs functions as expected. Added bg_image argument to sever function.","title":"sever 0.0.2"},{"location":"changelog/#sever-001","text":"sever_default A default sever screen. Simplified sever function: change three-dots to html argument which takes sever_default .","title":"sever 0.0.1"},{"location":"changelog/#sever-0019000","text":"Initial dev version.","title":"sever 0.0.1.9000"},{"location":"cleave/","text":"Cleave Cleave will let you customise your Shiny error messages. Basics Include use_sever in your UI then use cleave in the server. The cleave function takes several arguments to customise your errors, by default it forwards the error message, only centering it in the middle of the element, which you can turn off by setting center to FALSE . library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave() # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) By default not much changes. Single Message The first element of the cleave function lets you specify a different error message. You can also customise the text and background color. library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave( html = p(\"Sorry!\"), color = \"white\", bg_color = \"#333e48\" ) # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Multiple Messages You can also specify a list of ids of elements to which the cleave should apply, then of course you can use multiple cleave in a single app. library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Theme You can set a theme for all your cleave to avoid repeating arguments and ensure all errors have a consistent look. This can be done inside or outside the server function. Notice the duration argument to change the duration of the animation, set to 0 to have none. library(shiny) library(sever) # define theme cleave_theme(color = \"white\", bg_color = \"black\", duration = 1) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Be Creative The cleave function accepts any valid html, be creative. library(shiny) library(sever) cl <- tagList( h3(\"Hadley typed the wrong code\"), tags$img(src=\"https://i.imgur.com/7J1bEaJ.gif\", height=\"250px\") ) ui <- fluidPage( use_sever(), h4(\"Look at my plot\"), plotOutput(\"plot\") ) server <- function(input, output){ cleave(cl, color = \"black\", center = FALSE) # will generate an error output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Cleave"},{"location":"cleave/#cleave","text":"Cleave will let you customise your Shiny error messages.","title":"Cleave"},{"location":"cleave/#basics","text":"Include use_sever in your UI then use cleave in the server. The cleave function takes several arguments to customise your errors, by default it forwards the error message, only centering it in the middle of the element, which you can turn off by setting center to FALSE . library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave() # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) By default not much changes.","title":"Basics"},{"location":"cleave/#single-message","text":"The first element of the cleave function lets you specify a different error message. You can also customise the text and background color. library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave( html = p(\"Sorry!\"), color = \"white\", bg_color = \"#333e48\" ) # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Single Message"},{"location":"cleave/#multiple-messages","text":"You can also specify a list of ids of elements to which the cleave should apply, then of course you can use multiple cleave in a single app. library(shiny) library(sever) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Multiple Messages"},{"location":"cleave/#theme","text":"You can set a theme for all your cleave to avoid repeating arguments and ensure all errors have a consistent look. This can be done inside or outside the server function. Notice the duration argument to change the duration of the animation, set to 0 to have none. library(shiny) library(sever) # define theme cleave_theme(color = \"white\", bg_color = \"black\", duration = 1) ui <- fluidPage( use_sever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Theme"},{"location":"cleave/#be-creative","text":"The cleave function accepts any valid html, be creative. library(shiny) library(sever) cl <- tagList( h3(\"Hadley typed the wrong code\"), tags$img(src=\"https://i.imgur.com/7J1bEaJ.gif\", height=\"250px\") ) ui <- fluidPage( use_sever(), h4(\"Look at my plot\"), plotOutput(\"plot\") ) server <- function(input, output){ cleave(cl, color = \"black\", center = FALSE) # will generate an error output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Be Creative"},{"location":"examples/","text":"Examples Combine You can of course combine sever and cleave. library(shiny) library(sever) ui <- fluidPage( use_sever(), uiOutput(\"error\") ) server <- function(input, output){ sever() cleave(\"Gah!\") output$error <- renderPrint(error) } shinyApp(ui, server) Server Defined Variables You can use variables defined server-side to deliver for informative messages. library(shiny) library(sever) ui <- fluidPage( use_sever(), textInput(\"name\", \"Your name\") ) server <- function(input, output){ observeEvent(input$name, { msg <- p(input$name, \"broke the app :(\") sever(msg) }) } shinyApp(ui, server) Hide Errors You could use cleave to hide error messages though I'm unsure it's a good idea (fail loudly?). library(shiny) library(sever) ui <- fluidPage( use_sever(), uiOutput(\"error\") ) server <- function(input, output){ cleave(\"\") output$error <- renderUI(error) } shinyApp(ui, server)","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#combine","text":"You can of course combine sever and cleave. library(shiny) library(sever) ui <- fluidPage( use_sever(), uiOutput(\"error\") ) server <- function(input, output){ sever() cleave(\"Gah!\") output$error <- renderPrint(error) } shinyApp(ui, server)","title":"Combine"},{"location":"examples/#server-defined-variables","text":"You can use variables defined server-side to deliver for informative messages. library(shiny) library(sever) ui <- fluidPage( use_sever(), textInput(\"name\", \"Your name\") ) server <- function(input, output){ observeEvent(input$name, { msg <- p(input$name, \"broke the app :(\") sever(msg) }) } shinyApp(ui, server)","title":"Server Defined Variables"},{"location":"examples/#hide-errors","text":"You could use cleave to hide error messages though I'm unsure it's a good idea (fail loudly?). library(shiny) library(sever) ui <- fluidPage( use_sever(), uiOutput(\"error\") ) server <- function(input, output){ cleave(\"\") output$error <- renderUI(error) } shinyApp(ui, server)","title":"Hide Errors"},{"location":"sever/","text":"Sever Sever will let you customise the Shiny disconnected screen. Basics Include dependencies with use_sever then use the sever function to customise the screen, launch the app and stop the server to see the customised screen. library(shiny) library(sever) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server) Customise The first argument of the sever function ( html ) is used to specify the html to be displayed on the disconnected screen and defaults to sever_default ; you can of course change that behaviour. You can customise the default to some extend. library(shiny) library(sever) disconnected <- sever_default( title = \"Gah!\", subtitle = \"Your session ended\", button = \"Reconnect\", button_class = \"info\" ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"white\", color = \"black\") } shinyApp(ui, server) library(shiny) library(sever) disconnected <- tagList( h1(\"Whoah there...\"), p(\"Something went terribly wrong!\"), reload_button(\"REFRESH\", class = \"warning\") ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"#000\") } shinyApp(ui, server) If you want to even further customise the screen with CSS; it is assigned the severed CSS class. Background Image You can also use a background image. library(shiny) library(sever) img <- paste0( \"https://images.pexels.com/photos/4827/\", \"nature-forest-trees-fog.jpeg?auto=compress\", \"&cs=tinysrgb&dpr=2&h=750&w=1260\" ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(bg_image = img, color = \"black\") } shinyApp(ui, server)","title":"Sever"},{"location":"sever/#sever","text":"Sever will let you customise the Shiny disconnected screen.","title":"Sever"},{"location":"sever/#basics","text":"Include dependencies with use_sever then use the sever function to customise the screen, launch the app and stop the server to see the customised screen. library(shiny) library(sever) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server)","title":"Basics"},{"location":"sever/#customise","text":"The first argument of the sever function ( html ) is used to specify the html to be displayed on the disconnected screen and defaults to sever_default ; you can of course change that behaviour. You can customise the default to some extend. library(shiny) library(sever) disconnected <- sever_default( title = \"Gah!\", subtitle = \"Your session ended\", button = \"Reconnect\", button_class = \"info\" ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"white\", color = \"black\") } shinyApp(ui, server) library(shiny) library(sever) disconnected <- tagList( h1(\"Whoah there...\"), p(\"Something went terribly wrong!\"), reload_button(\"REFRESH\", class = \"warning\") ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"#000\") } shinyApp(ui, server) If you want to even further customise the screen with CSS; it is assigned the severed CSS class.","title":"Customise"},{"location":"sever/#background-image","text":"You can also use a background image. library(shiny) library(sever) img <- paste0( \"https://images.pexels.com/photos/4827/\", \"nature-forest-trees-fog.jpeg?auto=compress\", \"&cs=tinysrgb&dpr=2&h=750&w=1260\" ) ui <- fluidPage( use_sever(), h1(\"sever\") ) server <- function(input, output){ sever(bg_image = img, color = \"black\") } shinyApp(ui, server)","title":"Background Image"}]}