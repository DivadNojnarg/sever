{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Good-looking problems: customise your Shiny disconnected screen and error messages. Star Sponsor Install Install the stable version from CRAN: install.packages(\"sever\") Get the development version from Github with remotes or devtools : # install.packages(\"remotes\") remotes::install_github(\"JohnCoene/sever\") Usage Place useSever() in your Shiny UI. Use sever() to customise the disconnected screen. Use cleave() to customise hard error messages. Use chisel() to customise soft error messages. Use rupture() to show an idle screen. Example Place useSever in your Shiny UI and use the sever function server-side, cancel the session from the terminal to see the customised screen. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server) .bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 10px 7px 10px !important;line-height: 35px !important;height:51px !important;min-width:217px !important;text-decoration: none !important;display:inline-flex !important;color:#000000 !important;background-color:#FFFFFF !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 10px 7px 10px !important;font-size: 22px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#000000 !important;} Buy me a drink","title":"Home"},{"location":"#install","text":"Install the stable version from CRAN: install.packages(\"sever\") Get the development version from Github with remotes or devtools : # install.packages(\"remotes\") remotes::install_github(\"JohnCoene/sever\")","title":"Install"},{"location":"#usage","text":"Place useSever() in your Shiny UI. Use sever() to customise the disconnected screen. Use cleave() to customise hard error messages. Use chisel() to customise soft error messages. Use rupture() to show an idle screen.","title":"Usage"},{"location":"#example","text":"Place useSever in your Shiny UI and use the sever function server-side, cancel the session from the terminal to see the customised screen. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever() } shinyApp(ui, server) .bmc-button img{height: 34px !important;width: 35px !important;margin-bottom: 1px !important;box-shadow: none !important;border: none !important;vertical-align: middle !important;}.bmc-button{padding: 7px 10px 7px 10px !important;line-height: 35px !important;height:51px !important;min-width:217px !important;text-decoration: none !important;display:inline-flex !important;color:#000000 !important;background-color:#FFFFFF !important;border-radius: 5px !important;border: 1px solid transparent !important;padding: 7px 10px 7px 10px !important;font-size: 22px !important;letter-spacing: 0.6px !important;box-shadow: 0px 1px 2px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;margin: 0 auto !important;font-family:'Cookie', cursive !important;-webkit-box-sizing: border-box !important;box-sizing: border-box !important;-o-transition: 0.3s all linear !important;-webkit-transition: 0.3s all linear !important;-moz-transition: 0.3s all linear !important;-ms-transition: 0.3s all linear !important;transition: 0.3s all linear !important;}.bmc-button:hover, .bmc-button:active, .bmc-button:focus {-webkit-box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;text-decoration: none !important;box-shadow: 0px 1px 2px 2px rgba(190, 190, 190, 0.5) !important;opacity: 0.85 !important;color:#000000 !important;} Buy me a drink","title":"Example"},{"location":"changelog/","text":"Changelog sever 0.0.7.9000 Added .class argument to button and links functions. sever 0.0.7 Fix image background #8 Use webpack for JavaScript (via packer) now minified dependencies. Deprecate use_sever in favour of useSever sever 0.0.6 Added rupture to display a disconnected message after the user has been idle for a while. sever 0.0.5 Fix passing multiple ids to cleave see #1 Fix to remove cleave error on new value render + empty HTML content on error, see #2 . Add chisel to style soft error messages, those raised by validate . sever 0.0.4 Initial CRAN version. sever 0.0.3 Changed cleave center argument to center_horizontal and center_vertical for more flexibility. Change cleave appear animation speed. sever 0.0.2 Added cleave to customise error messages! Created website Ensure a single severed screen is present at any one time. Check if golem.app.prod option is set to keep functions from running if in dev mode to allow debugging, runs in prod. If not set runs functions as expected. Added bg_image argument to sever function. sever 0.0.1 sever_default A default sever screen. Simplified sever function: change three-dots to html argument which takes sever_default . sever 0.0.1.9000 Initial dev version.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#sever-0079000","text":"Added .class argument to button and links functions.","title":"sever 0.0.7.9000"},{"location":"changelog/#sever-007","text":"Fix image background #8 Use webpack for JavaScript (via packer) now minified dependencies. Deprecate use_sever in favour of useSever","title":"sever 0.0.7"},{"location":"changelog/#sever-006","text":"Added rupture to display a disconnected message after the user has been idle for a while.","title":"sever 0.0.6"},{"location":"changelog/#sever-005","text":"Fix passing multiple ids to cleave see #1 Fix to remove cleave error on new value render + empty HTML content on error, see #2 . Add chisel to style soft error messages, those raised by validate .","title":"sever 0.0.5"},{"location":"changelog/#sever-004","text":"Initial CRAN version.","title":"sever 0.0.4"},{"location":"changelog/#sever-003","text":"Changed cleave center argument to center_horizontal and center_vertical for more flexibility. Change cleave appear animation speed.","title":"sever 0.0.3"},{"location":"changelog/#sever-002","text":"Added cleave to customise error messages! Created website Ensure a single severed screen is present at any one time. Check if golem.app.prod option is set to keep functions from running if in dev mode to allow debugging, runs in prod. If not set runs functions as expected. Added bg_image argument to sever function.","title":"sever 0.0.2"},{"location":"changelog/#sever-001","text":"sever_default A default sever screen. Simplified sever function: change three-dots to html argument which takes sever_default .","title":"sever 0.0.1"},{"location":"changelog/#sever-0019000","text":"Initial dev version.","title":"sever 0.0.1.9000"},{"location":"chisel/","text":"Chisel The latest version of sever adds a chisel function which changes error messages raised by validate and need . These are referred to as \"silent errors.\" This is useful if one also wants to apply styling to those softer errors. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( selectInput(\"required_input\", \"Required input\", choices = c(\"Red pill\", \"Blue pill\"), multiple = TRUE ), uiOutput(\"thing\") ) ) server <- function(input, output){ cleave() chisel(color = \"black\", center_horizontal = FALSE) # will generate errors output$thing <- renderUI({ validate(need(input$required_input, \"Required input is required \ud83d\ude02\")) if(\"Red pill\" %in% input$required_input) { h1(\"Good choice!\") } else { stop(\"A regrettable decision.\") } }) } shinyApp(ui, server) Note that one can also have these with cleave but then both hard and silent errors will have the same styling: cleave(silent_errors = TRUE) .","title":"Chisel"},{"location":"chisel/#chisel","text":"The latest version of sever adds a chisel function which changes error messages raised by validate and need . These are referred to as \"silent errors.\" This is useful if one also wants to apply styling to those softer errors. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( selectInput(\"required_input\", \"Required input\", choices = c(\"Red pill\", \"Blue pill\"), multiple = TRUE ), uiOutput(\"thing\") ) ) server <- function(input, output){ cleave() chisel(color = \"black\", center_horizontal = FALSE) # will generate errors output$thing <- renderUI({ validate(need(input$required_input, \"Required input is required \ud83d\ude02\")) if(\"Red pill\" %in% input$required_input) { h1(\"Good choice!\") } else { stop(\"A regrettable decision.\") } }) } shinyApp(ui, server) Note that one can also have these with cleave but then both hard and silent errors will have the same styling: cleave(silent_errors = TRUE) .","title":"Chisel"},{"location":"cleave/","text":"Cleave Cleave will let you customise your Shiny error messages. Basics Include useSever in your UI then use cleave in the server. The cleave function takes several arguments to customise your errors, by default it forwards the error message, only centering it in the middle of the element, which you can turn off by setting center_vertical and center_horizontal to FALSE . library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave() # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) By default not much changes. Single Message The first element of the cleave function lets you specify a different error message. You can also customise the text and background color. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave( html = p(\"Sorry!\"), color = \"white\", bg_color = \"#333e48\" ) # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Multiple Messages You can also specify a list of ids of elements to which the cleave should apply, then of course you can use multiple cleave in a single app. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Theme You can set a theme for all your cleave to avoid repeating arguments and ensure all errors have a consistent look. This can be done inside or outside the server function. Notice the duration argument to change the duration of the animation, set to 0 to have none. library(shiny) library(sever) # define theme cleave_theme(color = \"white\", bg_color = \"black\", duration = .15) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) Be Creative The cleave function accepts any valid html, be creative. library(shiny) library(sever) cl <- tagList( h3(\"Hadley typed the wrong code\"), tags$img(src=\"https://i.imgur.com/7J1bEaJ.gif\", height=\"250px\") ) ui <- fluidPage( useSever(), h4(\"Look at my plot\"), plotOutput(\"plot\") ) server <- function(input, output){ cleave(cl, color = \"black\", center_vertical = FALSE) # will generate an error output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Cleave"},{"location":"cleave/#cleave","text":"Cleave will let you customise your Shiny error messages.","title":"Cleave"},{"location":"cleave/#basics","text":"Include useSever in your UI then use cleave in the server. The cleave function takes several arguments to customise your errors, by default it forwards the error message, only centering it in the middle of the element, which you can turn off by setting center_vertical and center_horizontal to FALSE . library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave() # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server) By default not much changes.","title":"Basics"},{"location":"cleave/#single-message","text":"The first element of the cleave function lets you specify a different error message. You can also customise the text and background color. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave( html = p(\"Sorry!\"), color = \"white\", bg_color = \"#333e48\" ) # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Single Message"},{"location":"cleave/#multiple-messages","text":"You can also specify a list of ids of elements to which the cleave should apply, then of course you can use multiple cleave in a single app. library(shiny) library(sever) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Multiple Messages"},{"location":"cleave/#theme","text":"You can set a theme for all your cleave to avoid repeating arguments and ensure all errors have a consistent look. This can be done inside or outside the server function. Notice the duration argument to change the duration of the animation, set to 0 to have none. library(shiny) library(sever) # define theme cleave_theme(color = \"white\", bg_color = \"black\", duration = .15) ui <- fluidPage( useSever(), fluidRow( column(4, uiOutput(\"thing\", width = \"100%\")), column(8, plotOutput(\"plot\")) ) ) server <- function(input, output){ cleave(\"ehhh\", ids = \"thing\") cleave(h2(\"You broke this!\"), ids = \"plot\") # will generate errors output$thing <- renderUI({ p(error) }) output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Theme"},{"location":"cleave/#be-creative","text":"The cleave function accepts any valid html, be creative. library(shiny) library(sever) cl <- tagList( h3(\"Hadley typed the wrong code\"), tags$img(src=\"https://i.imgur.com/7J1bEaJ.gif\", height=\"250px\") ) ui <- fluidPage( useSever(), h4(\"Look at my plot\"), plotOutput(\"plot\") ) server <- function(input, output){ cleave(cl, color = \"black\", center_vertical = FALSE) # will generate an error output$plot <- renderPlot({ plot(error) }) } shinyApp(ui, server)","title":"Be Creative"},{"location":"examples/","text":"Examples Combine You can of course combine sever and cleave. library(shiny) library(sever) ui <- fluidPage( useSever(), uiOutput(\"error\") ) server <- function(input, output){ sever() cleave(\"Gah!\") output$error <- renderPrint(error) } shinyApp(ui, server) Server Defined Variables You can use variables defined server-side to deliver for informative messages. library(shiny) library(sever) ui <- fluidPage( useSever(), textInput(\"name\", \"Your name\") ) server <- function(input, output){ observeEvent(input$name, { msg <- p(input$name, \"broke the app :(\") sever(msg) }) } shinyApp(ui, server) Frameworks If you are using another CSS/JavaScript framework, the sever button may not display correctly. You only need the button to trigger location.reload(); <a onClick = 'location.reload();'></a> Or in R. tags$a(onClick = \"location.reload();\")","title":"Advanced"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#combine","text":"You can of course combine sever and cleave. library(shiny) library(sever) ui <- fluidPage( useSever(), uiOutput(\"error\") ) server <- function(input, output){ sever() cleave(\"Gah!\") output$error <- renderPrint(error) } shinyApp(ui, server)","title":"Combine"},{"location":"examples/#server-defined-variables","text":"You can use variables defined server-side to deliver for informative messages. library(shiny) library(sever) ui <- fluidPage( useSever(), textInput(\"name\", \"Your name\") ) server <- function(input, output){ observeEvent(input$name, { msg <- p(input$name, \"broke the app :(\") sever(msg) }) } shinyApp(ui, server)","title":"Server Defined Variables"},{"location":"examples/#frameworks","text":"If you are using another CSS/JavaScript framework, the sever button may not display correctly. You only need the button to trigger location.reload(); <a onClick = 'location.reload();'></a> Or in R. tags$a(onClick = \"location.reload();\")","title":"Frameworks"},{"location":"license/","text":"MIT License Copyright (c) 2020 John Coene Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2020 John Coene Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"rupture/","text":"Rupture The rupture function allows displaying a screen that appears after the user has been idle for ms milliseconds. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"rupture\"), p(\"Wait for idle screen\") ) server <- function(input, output){ # set ms to 5 seconds for test rupture(ms = 5000) } shinyApp(ui, server) This consists of a new family of functions mirroring that of sever which work exactly the same way.","title":"Rupture"},{"location":"rupture/#rupture","text":"The rupture function allows displaying a screen that appears after the user has been idle for ms milliseconds. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"rupture\"), p(\"Wait for idle screen\") ) server <- function(input, output){ # set ms to 5 seconds for test rupture(ms = 5000) } shinyApp(ui, server) This consists of a new family of functions mirroring that of sever which work exactly the same way.","title":"Rupture"},{"location":"sever/","text":"Sever Sever will let you customise the Shiny disconnected screen. Basics Include dependencies with useSever then use the sever function to customise the screen, launch the app and stop the server to see the customised screen. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\"), actionButton(\"stop\", \"Stop App\") ) server <- function(input, output){ sever() observeEvent(input$stop, { stopApp() }) } shinyApp(ui, server) Customise The first argument of the sever function ( html ) is used to specify the html to be displayed on the disconnected screen and defaults to sever_default ; you can of course change that behaviour. You can customise the default to some extend. library(shiny) library(sever) disconnected <- sever_default( title = \"Gah!\", subtitle = \"Your session ended\", button = \"Reconnect\", button_class = \"info\" ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"white\", color = \"black\") } shinyApp(ui, server) You are by no means limited to customising the default, you can pass any HTML you like to the function. library(shiny) library(sever) disconnected <- tagList( h1(\"Whoah there...\"), p(\"Something went terribly wrong!\"), reload_button(\"REFRESH\", class = \"warning\") ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"#000\") } shinyApp(ui, server) If you want to even further customise the screen with CSS; it is assigned the severed CSS class. Background Image You can also use a background image. library(shiny) library(sever) img <- paste0( \"https://images.pexels.com/photos/4827/\", \"nature-forest-trees-fog.jpeg?auto=compress\", \"&cs=tinysrgb&dpr=2&h=750&w=1260\" ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(bg_image = img, color = \"black\") } shinyApp(ui, server) Box You can also have a box around your content, which may come in handy if you still want the background to be somewhat transparent. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(color = \"black\", bg_color = \"rgba(0,0,0,.5)\", box = TRUE) } shinyApp(ui, server)","title":"Sever"},{"location":"sever/#sever","text":"Sever will let you customise the Shiny disconnected screen.","title":"Sever"},{"location":"sever/#basics","text":"Include dependencies with useSever then use the sever function to customise the screen, launch the app and stop the server to see the customised screen. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\"), actionButton(\"stop\", \"Stop App\") ) server <- function(input, output){ sever() observeEvent(input$stop, { stopApp() }) } shinyApp(ui, server)","title":"Basics"},{"location":"sever/#customise","text":"The first argument of the sever function ( html ) is used to specify the html to be displayed on the disconnected screen and defaults to sever_default ; you can of course change that behaviour. You can customise the default to some extend. library(shiny) library(sever) disconnected <- sever_default( title = \"Gah!\", subtitle = \"Your session ended\", button = \"Reconnect\", button_class = \"info\" ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"white\", color = \"black\") } shinyApp(ui, server) You are by no means limited to customising the default, you can pass any HTML you like to the function. library(shiny) library(sever) disconnected <- tagList( h1(\"Whoah there...\"), p(\"Something went terribly wrong!\"), reload_button(\"REFRESH\", class = \"warning\") ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(html = disconnected, bg_color = \"#000\") } shinyApp(ui, server) If you want to even further customise the screen with CSS; it is assigned the severed CSS class.","title":"Customise"},{"location":"sever/#background-image","text":"You can also use a background image. library(shiny) library(sever) img <- paste0( \"https://images.pexels.com/photos/4827/\", \"nature-forest-trees-fog.jpeg?auto=compress\", \"&cs=tinysrgb&dpr=2&h=750&w=1260\" ) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(bg_image = img, color = \"black\") } shinyApp(ui, server)","title":"Background Image"},{"location":"sever/#box","text":"You can also have a box around your content, which may come in handy if you still want the background to be somewhat transparent. library(shiny) library(sever) ui <- fluidPage( useSever(), h1(\"sever\") ) server <- function(input, output){ sever(color = \"black\", bg_color = \"rgba(0,0,0,.5)\", box = TRUE) } shinyApp(ui, server)","title":"Box"}]}